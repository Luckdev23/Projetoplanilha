from kivy.app import App
from kivy.uix.button import Button
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.label import Label
from kivy.uix.gridlayout import GridLayout
from kivy.uix.textinput import TextInput
from kivy.graphics import Color, Rectangle
from kivy.uix.relativelayout import RelativeLayout
import matplotlib.pyplot as plt
import numpy as np
from kivy.uix.image import Image
import io
from kivy.core.image import Image as CoreImage

class JanelaResultados(Screen):
    def __init__(self, **kwargs):
        super(JanelaResultados, self).__init__(**kwargs)
        layout = FloatLayout()

        # Adicionando uma BoxLayout para os botões
        button_layout = BoxLayout(size_hint=(1, None), height='50dp', pos_hint={'x': 0, 'top': 1}, spacing=10, padding=(0, 10))

        # Criando os botões
        for i in range(1, 5):
            button = Button(text=f'Opção {i}', size_hint_x=None, width='100dp')
            button.bind(on_release=self.open_window)  # Vinculando a ação do botão
            button_layout.add_widget(button)

        layout.add_widget(button_layout)

        # Título com estilo, agora abaixo dos botões
        title = Label(text='Resultados de Vendas', font_size='32sp', size_hint=(1, None), height='60dp', color=(1, 1, 1, 1), pos_hint={'x': 0, 'top': 0.8})
        layout.add_widget(title)

        # Tabela de produtos
        grid = GridLayout(cols=1, size_hint=(1, None), pos_hint={'x': 0, 'top': 0.65}, spacing=5)
        grid.bind(minimum_height=grid.setter('height'))

        # Adicionando a primeira linha (cabeçalho)
        header_row = GridLayout(cols=9, size_hint_y=None, height='30dp', spacing=0)

        header_inputs = ['Produto', 'Vendidos', 'Custo Und', 'Custo Total', 'Preço Und', 'Faturado', 'Lucro Und', 'Lucro Total', 'Margem']

        # Pintar as colunas conforme solicitado
        header_row.add_widget(self.create_header_input(header_inputs[0], (0, 0, 0.5)))  # Azul marinho
        header_row.add_widget(self.create_header_input(header_inputs[1], (0.4, 0.4, 0.4)))  # Cinza escuro (Vendidos)
        header_row.add_widget(self.create_header_input(header_inputs[2], (0.4, 0.4, 0.4)))  # Cinza escuro (Custo Und)
        header_row.add_widget(self.create_header_input(header_inputs[3], (1, 0, 0)))  # Vermelho (Custo Total)
        header_row.add_widget(self.create_header_input(header_inputs[4], (0.4, 0.4, 0.4)))  # Cinza escuro (Preço Und)
        header_row.add_widget(self.create_header_input(header_inputs[5], (1, 0.7, 0)))  # Dourado claro (Faturado)
        header_row.add_widget(self.create_header_input(header_inputs[6], (0.1, 0.6, 0.1)))  # Verde escuro (Lucro Und)
        header_row.add_widget(self.create_header_input(header_inputs[7], (0.1, 0.6, 0.1)))  # Verde escuro (Lucro Total)
        header_row.add_widget(self.create_header_input(header_inputs[8], (0.1, 0.6, 0.1)))  # Verde escuro (Margem)

        grid.add_widget(header_row)

        # Adicionando linhas para produtos
        for _ in range(5):
            row = GridLayout(cols=9, size_hint_y=None, height='30dp', spacing=5)

            # Criar campos em branco
            for i in range(9):
                input_widget = TextInput(hint_text='', multiline=False, size_hint_y=None, height='30dp', background_color=(1, 1, 1, 1))  # Branco
                row.add_widget(input_widget)

            grid.add_widget(row)

        grid.height = 30 * 6  # Uma linha a mais para incluir o cabeçalho
        layout.add_widget(grid)

        self.add_widget(layout)

    def create_header_input(self, text, color):
        header_layout = RelativeLayout(size_hint_y=None, height='30dp')

        input_widget = TextInput(hint_text='', multiline=False, size_hint=(1, 1), readonly=True, background_color=color)
        header_layout.add_widget(input_widget)

        label_widget = Label(text=text, color=(1, 1, 1, 1), size_hint=(1, 1), halign='center', valign='middle', pos_hint={'center_x': 0.5, 'center_y': 0.5})
        header_layout.add_widget(label_widget)

        label_widget.bind(size=label_widget.setter('text_size'))
        label_widget.text_size = label_widget.size

        return header_layout

    def open_window(self, instance):
        if instance.text == 'Opção 1':
            if self.manager.current != 'janela_relatorios':
                self.manager.current = 'janela_relatorios'  # Abre a Janela Relatórios se não estiver já aberta
        elif instance.text == 'Opção 2':
            self.manager.current = 'janela_resultados'  # Muda para a Janela Resultados
        else:
            print(f'Abrindo a {instance.text}')

class JanelaRelatorios(Screen):
    def __init__(self, **kwargs):
        super(JanelaRelatorios, self).__init__(**kwargs)
        layout = FloatLayout()

        # Adicionando uma BoxLayout para os botões
        button_layout = BoxLayout(size_hint=(1, None), height='50dp', pos_hint={'x': 0, 'top': 1}, spacing=10, padding=(0, 10))

        # Criando os botões, replicando as opções da janela de resultados
        for i in range(1, 5):
            button = Button(text=f'Opção {i}', size_hint_x=None, width='100dp')
            button.bind(on_release=self.open_window)  # Vinculando a ação do botão
            button_layout.add_widget(button)

        layout.add_widget(button_layout)

        # Título da janela
        title = Label(text='Janela Relatórios', font_size='32sp', size_hint=(1, None), height='60dp', color=(1, 1, 1, 1), pos_hint={'x': 0, 'top': 0.8})
        layout.add_widget(title)

        # Adicionando o gráfico circular
        self.add_pie_chart(layout)

        self.add_widget(layout)

    def add_pie_chart(self, layout):
        # Dados do gráfico circular
        labels = ['Produto A', 'Produto B', 'Produto C']
        sizes = [15, 30, 45]  # Porcentagens ou valores

        # Criando o gráfico de donut
        plt.figure(figsize=(6, 3))
        wedges, texts, autotexts = plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90,
                                           wedgeprops=dict(width=0.3, edgecolor='w'))  # largura do donut

        plt.axis('equal')  # Equal aspect ratio ensures that pie chart is circular.

        # Salvando o gráfico como imagem
        buf = io.BytesIO()
        plt.savefig(buf, format='png', bbox_inches='tight')
        buf.seek(0)
        plt.close()

        # Convertendo para imagem Kivy
        image = CoreImage(buf, ext='png')

        # Exibindo a imagem no layout
        img_widget = Image(texture=image.texture, size_hint=(0.9, 0.5), pos_hint={'center_x': 0.5, 'top': 0.6})
        layout.add_widget(img_widget)

    def open_window(self, instance):
        if instance.text == 'Opção 1':
            # Não faz nada se já estiver na janela de relatórios
            print('Opção 1 clicada na janela de relatórios, mas sem funcionalidade.')
        elif instance.text == 'Opção 2':
            self.manager.current = 'janela_resultados'  # Muda para a Janela Resultados
        else:
            print(f'Abrindo a {instance.text}')

class MeuApp(App):
    def build(self):
        sm = ScreenManager()
        sm.add_widget(JanelaResultados(name='janela_resultados'))  # Janela de Resultados como tela inicial
        sm.add_widget(JanelaRelatorios(name='janela_relatorios'))  # Janela de Relatórios
        return sm

if __name__ == '__main__':
    MeuApp().run()