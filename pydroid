from kivy.app import App
from kivy.uix.button import Button
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.label import Label
from kivy.uix.gridlayout import GridLayout
from kivy.uix.textinput import TextInput
from kivy.graphics import Color
from kivy.uix.relativelayout import RelativeLayout

class JanelaResultados(Screen):
    def __init__(self, **kwargs):
        super(JanelaResultados, self).__init__(**kwargs)
        layout = FloatLayout()

        # Adicionando uma BoxLayout para os botões
        button_layout = BoxLayout(size_hint=(1, None), height='50dp', pos_hint={'x': 0, 'top': 1}, spacing=10, padding=(0, 10))

        # Criando os botões
        for i in range(1, 5):
            button = Button(text=f'Opção {i}', size_hint_x=None, width='100dp')
            button.bind(on_release=self.open_window)  # Vinculando a ação do botão
            button_layout.add_widget(button)

        layout.add_widget(button_layout)

        # Título com estilo
        title = Label(text='Resultados de Vendas', font_size='32sp', size_hint=(1, None), height='60dp', color=(1, 1, 1, 1), pos_hint={'x': 0, 'top': 0.8})
        layout.add_widget(title)

        # Tabela de produtos
        self.grid = GridLayout(cols=1, size_hint=(1, None), pos_hint={'x': 0, 'top': 0.65}, spacing=5)
        self.grid.bind(minimum_height=self.grid.setter('height'))

        # Adicionando a primeira linha (cabeçalho)
        header_row = GridLayout(cols=9, size_hint_y=None, height='30dp', spacing=0)

        header_inputs = ['Produto', 'Vendidos', 'Custo Und', 'Custo Total', 'Preço Und', 'Faturado', 'Lucro Und', 'Lucro Total', 'Margem']

        # Cores dos cabeçalhos
        header_colors = [
            (0, 0, 0.5),    # Azul marinho
            (0.4, 0.4, 0.4), # Cinza escuro
            (0.4, 0.4, 0.4), # Cinza escuro
            (0.7, 0, 0),    # Vermelho escuro
            (0.4, 0.4, 0.4), # Cinza escuro
            (1, 0.6, 0),    # Dourado escuro
            (0.1, 0.6, 0.1), # Verde escuro
            (0.1, 0.6, 0.1), # Verde escuro
            (0.1, 0.6, 0.1), # Verde escuro
        ]

        for i, color in enumerate(header_colors):
            header_row.add_widget(self.create_header_input(header_inputs[i], color))

        self.grid.add_widget(header_row)

        # Adicionando linhas para produtos
        for _ in range(5):
            row = GridLayout(cols=9, size_hint_y=None, height='30dp', spacing=5)

            # Criar campos em branco
            self.text_inputs = []
            for i in range(9):
                input_widget = TextInput(hint_text='', multiline=False, size_hint_y=None, height='30dp', background_color=(1, 1, 1, 1))  # Branco
                input_widget.bind(text=self.on_text_change)  # Vincula a função de atualização
                row.add_widget(input_widget)
                self.text_inputs.append(input_widget)

            self.grid.add_widget(row)

        self.grid.height = 30 * (5 + 1)  # Uma linha a mais para incluir o cabeçalho
        layout.add_widget(self.grid)

        self.add_widget(layout)

    def create_header_input(self, text, color):
        header_layout = RelativeLayout(size_hint_y=None, height='30dp')

        input_widget = TextInput(hint_text='', multiline=False, size_hint=(1, 1), readonly=True, background_color=color)
        header_layout.add_widget(input_widget)

        label_widget = Label(text=text, color=(1, 1, 1, 1), size_hint=(1, 1), halign='center', valign='middle', pos_hint={'center_x': 0.5, 'center_y': 0.5})
        header_layout.add_widget(label_widget)

        label_widget.bind(size=label_widget.setter('text_size'))
        label_widget.text_size = label_widget.size

        return header_layout

    def on_text_change(self, instance, value):
        # Atualiza os cálculos quando um campo de texto é alterado
        row = instance.parent
        inputs = row.children[::-1]  # Inverte a lista para acessar os widgets na ordem correta

        try:
            vendidos = float(inputs[1].text) if inputs[1].text else 0
            custo_und = float(inputs[2].text) if inputs[2].text else 0
            preco_und = float(inputs[4].text) if inputs[4].text else 0

            # Calcula Custo Total
            custo_total = vendidos * custo_und
            inputs[3].text = str(custo_total)

            # Calcula Faturado
            faturado = vendidos * preco_und
            inputs[5].text = str(faturado)

            # Calcula Lucro Und
            lucro_und = preco_und - custo_und
            inputs[6].text = str(lucro_und)

            # Calcula Lucro Total
            lucro_total = faturado - custo_total
            inputs[7].text = str(lucro_total)

            # Calcula Margem
            margem = (lucro_total / faturado) * 100 if faturado > 0 else 0
            inputs[8].text = f"{margem:.2f}%"
        except ValueError:
            pass  # Ignora erros de conversão

    def open_window(self, instance):
        if instance.text == 'Opção 1':
            # Ação para a Opção 1
            pass
        elif instance.text == 'Opção 2':
            self.manager.current = 'janela_resultados'  # Muda para a Janela Resultados
        else:
            print(f'Abrindo a {instance.text}')

class MeuApp(App):
    def build(self):
        sm = ScreenManager()
        sm.add_widget(JanelaResultados(name='janela_resultados'))  # Janela de Resultados como tela inicial
        return sm

if __name__ == '__main__':
    MeuApp().run()